/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamsObservation_2 struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

type TeamsParameters_2 struct {

	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Required
	Usernames []*string `json:"usernames" tf:"usernames,omitempty"`
}

// TeamsSpec defines the desired state of Teams
type TeamsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamsParameters_2 `json:"forProvider"`
}

// TeamsStatus defines the observed state of Teams.
type TeamsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamsObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Teams is the Schema for the Teamss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type Teams struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TeamsSpec   `json:"spec"`
	Status            TeamsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamsList contains a list of Teamss
type TeamsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Teams `json:"items"`
}

// Repository type metadata.
var (
	Teams_Kind             = "Teams"
	Teams_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Teams_Kind}.String()
	Teams_KindAPIVersion   = Teams_Kind + "." + CRDGroupVersion.String()
	Teams_GroupVersionKind = CRDGroupVersion.WithKind(Teams_Kind)
)

func init() {
	SchemeBuilder.Register(&Teams{}, &TeamsList{})
}
