/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PeeringObservation struct {
	AtlasID *string `json:"atlasId,omitempty" tf:"atlas_id,omitempty"`

	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty" tf:"error_message,omitempty"`

	ErrorState *string `json:"errorState,omitempty" tf:"error_state,omitempty"`

	ErrorStateName *string `json:"errorStateName,omitempty" tf:"error_state_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PeerID *string `json:"peerId,omitempty" tf:"peer_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StatusName *string `json:"statusName,omitempty" tf:"status_name,omitempty"`
}

type PeeringParameters struct {

	// +kubebuilder:validation:Optional
	AccepterRegionName *string `json:"accepterRegionName,omitempty" tf:"accepter_region_name,omitempty"`

	// +kubebuilder:validation:Optional
	AtlasCidrBlock *string `json:"atlasCidrBlock,omitempty" tf:"atlas_cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	AtlasGCPProjectID *string `json:"atlasGcpProjectId,omitempty" tf:"atlas_gcp_project_id,omitempty"`

	// +kubebuilder:validation:Optional
	AtlasVPCName *string `json:"atlasVpcName,omitempty" tf:"atlas_vpc_name,omitempty"`

	// +kubebuilder:validation:Optional
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	AzureDirectoryID *string `json:"azureDirectoryId,omitempty" tf:"azure_directory_id,omitempty"`

	// +kubebuilder:validation:Optional
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty" tf:"azure_subscription_id,omitempty"`

	// +kubebuilder:validation:Required
	ContainerID *string `json:"containerId" tf:"container_id,omitempty"`

	// +kubebuilder:validation:Optional
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Required
	ProviderName *string `json:"providerName" tf:"provider_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTableCidrBlock *string `json:"routeTableCidrBlock,omitempty" tf:"route_table_cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VnetName *string `json:"vnetName,omitempty" tf:"vnet_name,omitempty"`
}

// PeeringSpec defines the desired state of Peering
type PeeringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PeeringParameters `json:"forProvider"`
}

// PeeringStatus defines the observed state of Peering.
type PeeringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PeeringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Peering is the Schema for the Peerings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type Peering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PeeringSpec   `json:"spec"`
	Status            PeeringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringList contains a list of Peerings
type PeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Peering `json:"items"`
}

// Repository type metadata.
var (
	Peering_Kind             = "Peering"
	Peering_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Peering_Kind}.String()
	Peering_KindAPIVersion   = Peering_Kind + "." + CRDGroupVersion.String()
	Peering_GroupVersionKind = CRDGroupVersion.WithKind(Peering_Kind)
)

func init() {
	SchemeBuilder.Register(&Peering{}, &PeeringList{})
}
