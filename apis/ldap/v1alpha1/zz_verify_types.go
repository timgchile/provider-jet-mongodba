/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LinksObservation struct {
}

type LinksParameters struct {

	// +kubebuilder:validation:Required
	Href *string `json:"href" tf:"href,omitempty"`

	// +kubebuilder:validation:Required
	Rel *string `json:"rel" tf:"rel,omitempty"`
}

type ValidationsObservation struct {
}

type ValidationsParameters struct {

	// +kubebuilder:validation:Required
	Status *string `json:"status" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	ValidationType *string `json:"validationType" tf:"validation_type,omitempty"`
}

type VerifyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []LinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Validations []ValidationsObservation `json:"validations,omitempty" tf:"validations,omitempty"`
}

type VerifyParameters struct {

	// +kubebuilder:validation:Optional
	AuthzQueryTemplate *string `json:"authzQueryTemplate,omitempty" tf:"authz_query_template,omitempty"`

	// +kubebuilder:validation:Required
	BindPassword *string `json:"bindPassword" tf:"bind_password,omitempty"`

	// +kubebuilder:validation:Required
	BindUsername *string `json:"bindUsername" tf:"bind_username,omitempty"`

	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// +crossplane:generate:reference:type=github.com/timgchile/provider-jet-mongodba/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/timgchile/provider-jet-mongodba/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

// VerifySpec defines the desired state of Verify
type VerifySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VerifyParameters `json:"forProvider"`
}

// VerifyStatus defines the observed state of Verify.
type VerifyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VerifyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Verify is the Schema for the Verifys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type Verify struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VerifySpec   `json:"spec"`
	Status            VerifyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VerifyList contains a list of Verifys
type VerifyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Verify `json:"items"`
}

// Repository type metadata.
var (
	Verify_Kind             = "Verify"
	Verify_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Verify_Kind}.String()
	Verify_KindAPIVersion   = Verify_Kind + "." + CRDGroupVersion.String()
	Verify_GroupVersionKind = CRDGroupVersion.WithKind(Verify_Kind)
)

func init() {
	SchemeBuilder.Register(&Verify{}, &VerifyList{})
}
