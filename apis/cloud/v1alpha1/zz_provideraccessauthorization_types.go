/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsObservation struct {
}

type AwsParameters struct {

	// +kubebuilder:validation:Required
	IAMAssumedRoleArn *string `json:"iamAssumedRoleArn" tf:"iam_assumed_role_arn,omitempty"`
}

type ProviderAccessAuthorizationFeatureUsagesObservation struct {
}

type ProviderAccessAuthorizationFeatureUsagesParameters struct {

	// +kubebuilder:validation:Required
	FeatureID map[string]*string `json:"featureId" tf:"feature_id,omitempty"`

	// +kubebuilder:validation:Required
	FeatureType *string `json:"featureType" tf:"feature_type,omitempty"`
}

type ProviderAccessAuthorizationObservation struct {
	AuthorizedDate *string `json:"authorizedDate,omitempty" tf:"authorized_date,omitempty"`

	FeatureUsages []ProviderAccessAuthorizationFeatureUsagesObservation `json:"featureUsages,omitempty" tf:"feature_usages,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProviderAccessAuthorizationParameters struct {

	// +kubebuilder:validation:Optional
	Aws []AwsParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// +crossplane:generate:reference:type=github.com/timgchile/provider-jet-mongodba/apis/mongodbatlas/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/timgchile/provider-jet-mongodba/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	RoleID *string `json:"roleId" tf:"role_id,omitempty"`
}

// ProviderAccessAuthorizationSpec defines the desired state of ProviderAccessAuthorization
type ProviderAccessAuthorizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderAccessAuthorizationParameters `json:"forProvider"`
}

// ProviderAccessAuthorizationStatus defines the observed state of ProviderAccessAuthorization.
type ProviderAccessAuthorizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderAccessAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderAccessAuthorization is the Schema for the ProviderAccessAuthorizations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type ProviderAccessAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProviderAccessAuthorizationSpec   `json:"spec"`
	Status            ProviderAccessAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderAccessAuthorizationList contains a list of ProviderAccessAuthorizations
type ProviderAccessAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderAccessAuthorization `json:"items"`
}

// Repository type metadata.
var (
	ProviderAccessAuthorization_Kind             = "ProviderAccessAuthorization"
	ProviderAccessAuthorization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderAccessAuthorization_Kind}.String()
	ProviderAccessAuthorization_KindAPIVersion   = ProviderAccessAuthorization_Kind + "." + CRDGroupVersion.String()
	ProviderAccessAuthorization_GroupVersionKind = CRDGroupVersion.WithKind(ProviderAccessAuthorization_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderAccessAuthorization{}, &ProviderAccessAuthorizationList{})
}
