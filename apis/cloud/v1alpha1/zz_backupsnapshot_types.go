/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupSnapshotObservation struct {
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MasterKeyUUID *string `json:"masterKeyUuid,omitempty" tf:"master_key_uuid,omitempty"`

	Members []MembersObservation `json:"members,omitempty" tf:"members,omitempty"`

	MongodVersion *string `json:"mongodVersion,omitempty" tf:"mongod_version,omitempty"`

	ReplicaSetName *string `json:"replicaSetName,omitempty" tf:"replica_set_name,omitempty"`

	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	SnapshotIds []*string `json:"snapshotIds,omitempty" tf:"snapshot_ids,omitempty"`

	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty" tf:"storage_size_bytes,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BackupSnapshotParameters struct {

	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Required
	RetentionInDays *float64 `json:"retentionInDays" tf:"retention_in_days,omitempty"`
}

type MembersObservation struct {
}

type MembersParameters struct {

	// +kubebuilder:validation:Required
	CloudProvider *string `json:"cloudProvider" tf:"cloud_provider,omitempty"`

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	ReplicaSetName *string `json:"replicaSetName" tf:"replica_set_name,omitempty"`
}

// BackupSnapshotSpec defines the desired state of BackupSnapshot
type BackupSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupSnapshotParameters `json:"forProvider"`
}

// BackupSnapshotStatus defines the observed state of BackupSnapshot.
type BackupSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupSnapshot is the Schema for the BackupSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type BackupSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupSnapshotSpec   `json:"spec"`
	Status            BackupSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupSnapshotList contains a list of BackupSnapshots
type BackupSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupSnapshot `json:"items"`
}

// Repository type metadata.
var (
	BackupSnapshot_Kind             = "BackupSnapshot"
	BackupSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupSnapshot_Kind}.String()
	BackupSnapshot_KindAPIVersion   = BackupSnapshot_Kind + "." + CRDGroupVersion.String()
	BackupSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(BackupSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupSnapshot{}, &BackupSnapshotList{})
}
