/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPAccessListObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IPAccessListParameters struct {

	// +kubebuilder:validation:Optional
	AwsSecurityGroup *string `json:"awsSecurityGroup,omitempty" tf:"aws_security_group,omitempty"`

	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// +crossplane:generate:reference:type=github.com/timgchile/provider-jet-mongodba/apis/mongodba/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/timgchile/provider-jet-mongodba/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

// IPAccessListSpec defines the desired state of IPAccessList
type IPAccessListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPAccessListParameters `json:"forProvider"`
}

// IPAccessListStatus defines the observed state of IPAccessList.
type IPAccessListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPAccessListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPAccessList is the Schema for the IPAccessLists API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type IPAccessList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPAccessListSpec   `json:"spec"`
	Status            IPAccessListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPAccessListList contains a list of IPAccessLists
type IPAccessListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPAccessList `json:"items"`
}

// Repository type metadata.
var (
	IPAccessList_Kind             = "IPAccessList"
	IPAccessList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPAccessList_Kind}.String()
	IPAccessList_KindAPIVersion   = IPAccessList_Kind + "." + CRDGroupVersion.String()
	IPAccessList_GroupVersionKind = CRDGroupVersion.WithKind(IPAccessList_Kind)
)

func init() {
	SchemeBuilder.Register(&IPAccessList{}, &IPAccessListList{})
}
