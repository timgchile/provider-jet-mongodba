/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdvancedClusterObservation struct {
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ConnectionStrings []ConnectionStringsObservation `json:"connectionStrings,omitempty" tf:"connection_strings,omitempty"`

	CreateDate *string `json:"createDate,omitempty" tf:"create_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MongoDBVersion *string `json:"mongoDbVersion,omitempty" tf:"mongo_db_version,omitempty"`

	StateName *string `json:"stateName,omitempty" tf:"state_name,omitempty"`
}

type AdvancedClusterParameters struct {

	// +kubebuilder:validation:Optional
	AdvancedConfiguration []AdvancedConfigurationParameters `json:"advancedConfiguration,omitempty" tf:"advanced_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	BackupEnabled *bool `json:"backupEnabled,omitempty" tf:"backup_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	BiConnector []BiConnectorParameters `json:"biConnector,omitempty" tf:"bi_connector,omitempty"`

	// +kubebuilder:validation:Required
	ClusterType *string `json:"clusterType" tf:"cluster_type,omitempty"`

	// +kubebuilder:validation:Optional
	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionAtRestProvider *string `json:"encryptionAtRestProvider,omitempty" tf:"encryption_at_rest_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []LabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	MongoDBMajorVersion *string `json:"mongoDbMajorVersion,omitempty" tf:"mongo_db_major_version,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// +kubebuilder:validation:Optional
	PitEnabled *bool `json:"pitEnabled,omitempty" tf:"pit_enabled,omitempty"`

	// +crossplane:generate:reference:type=Project
	// +crossplane:generate:reference:extractor=github.com/timgchile/provider-jet-mongodba/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ReplicationSpecs []ReplicationSpecsParameters `json:"replicationSpecs" tf:"replication_specs,omitempty"`

	// +kubebuilder:validation:Optional
	RootCertType *string `json:"rootCertType,omitempty" tf:"root_cert_type,omitempty"`

	// +kubebuilder:validation:Optional
	VersionReleaseSystem *string `json:"versionReleaseSystem,omitempty" tf:"version_release_system,omitempty"`
}

type AdvancedConfigurationObservation struct {
}

type AdvancedConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	DefaultReadConcern *string `json:"defaultReadConcern,omitempty" tf:"default_read_concern,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultWriteConcern *string `json:"defaultWriteConcern,omitempty" tf:"default_write_concern,omitempty"`

	// +kubebuilder:validation:Optional
	FailIndexKeyTooLong *bool `json:"failIndexKeyTooLong,omitempty" tf:"fail_index_key_too_long,omitempty"`

	// +kubebuilder:validation:Optional
	JavascriptEnabled *bool `json:"javascriptEnabled,omitempty" tf:"javascript_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	MinimumEnabledTLSProtocol *string `json:"minimumEnabledTlsProtocol,omitempty" tf:"minimum_enabled_tls_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	NoTableScan *bool `json:"noTableScan,omitempty" tf:"no_table_scan,omitempty"`

	// +kubebuilder:validation:Optional
	OplogSizeMb *float64 `json:"oplogSizeMb,omitempty" tf:"oplog_size_mb,omitempty"`

	// +kubebuilder:validation:Optional
	SampleRefreshIntervalBiConnector *float64 `json:"sampleRefreshIntervalBiConnector,omitempty" tf:"sample_refresh_interval_bi_connector,omitempty"`

	// +kubebuilder:validation:Optional
	SampleSizeBiConnector *float64 `json:"sampleSizeBiConnector,omitempty" tf:"sample_size_bi_connector,omitempty"`
}

type AnalyticsSpecsObservation struct {
}

type AnalyticsSpecsParameters struct {

	// +kubebuilder:validation:Optional
	DiskIops *float64 `json:"diskIops,omitempty" tf:"disk_iops,omitempty"`

	// +kubebuilder:validation:Optional
	EBSVolumeType *string `json:"ebsVolumeType,omitempty" tf:"ebs_volume_type,omitempty"`

	// +kubebuilder:validation:Required
	InstanceSize *string `json:"instanceSize" tf:"instance_size,omitempty"`

	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`
}

type AutoScalingObservation struct {
}

type AutoScalingParameters struct {

	// +kubebuilder:validation:Optional
	ComputeEnabled *bool `json:"computeEnabled,omitempty" tf:"compute_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ComputeMaxInstanceSize *string `json:"computeMaxInstanceSize,omitempty" tf:"compute_max_instance_size,omitempty"`

	// +kubebuilder:validation:Optional
	ComputeMinInstanceSize *string `json:"computeMinInstanceSize,omitempty" tf:"compute_min_instance_size,omitempty"`

	// +kubebuilder:validation:Optional
	ComputeScaleDownEnabled *bool `json:"computeScaleDownEnabled,omitempty" tf:"compute_scale_down_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DiskGbEnabled *bool `json:"diskGbEnabled,omitempty" tf:"disk_gb_enabled,omitempty"`
}

type BiConnectorObservation struct {
}

type BiConnectorParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ReadPreference *string `json:"readPreference,omitempty" tf:"read_preference,omitempty"`
}

type ConnectionStringsObservation struct {
}

type ConnectionStringsParameters struct {

	// +kubebuilder:validation:Required
	AwsPrivateLink map[string]*string `json:"awsPrivateLink" tf:"aws_private_link,omitempty"`

	// +kubebuilder:validation:Required
	AwsPrivateLinkSrv map[string]*string `json:"awsPrivateLinkSrv" tf:"aws_private_link_srv,omitempty"`

	// +kubebuilder:validation:Required
	Private *string `json:"private" tf:"private,omitempty"`

	// +kubebuilder:validation:Required
	PrivateEndpoint []PrivateEndpointParameters `json:"privateEndpoint" tf:"private_endpoint,omitempty"`

	// +kubebuilder:validation:Required
	PrivateSrv *string `json:"privateSrv" tf:"private_srv,omitempty"`

	// +kubebuilder:validation:Required
	Standard *string `json:"standard" tf:"standard,omitempty"`

	// +kubebuilder:validation:Required
	StandardSrv *string `json:"standardSrv" tf:"standard_srv,omitempty"`
}

type ElectableSpecsObservation struct {
}

type ElectableSpecsParameters struct {

	// +kubebuilder:validation:Optional
	DiskIops *float64 `json:"diskIops,omitempty" tf:"disk_iops,omitempty"`

	// +kubebuilder:validation:Optional
	EBSVolumeType *string `json:"ebsVolumeType,omitempty" tf:"ebs_volume_type,omitempty"`

	// +kubebuilder:validation:Required
	InstanceSize *string `json:"instanceSize" tf:"instance_size,omitempty"`

	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`
}

type EndpointsObservation struct {
}

type EndpointsParameters struct {

	// +kubebuilder:validation:Required
	EndpointID *string `json:"endpointId" tf:"endpoint_id,omitempty"`

	// +kubebuilder:validation:Required
	ProviderName *string `json:"providerName" tf:"provider_name,omitempty"`

	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type LabelsObservation struct {
}

type LabelsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PrivateEndpointObservation struct {
}

type PrivateEndpointParameters struct {

	// +kubebuilder:validation:Required
	ConnectionString *string `json:"connectionString" tf:"connection_string,omitempty"`

	// +kubebuilder:validation:Required
	Endpoints []EndpointsParameters `json:"endpoints" tf:"endpoints,omitempty"`

	// +kubebuilder:validation:Required
	SrvConnectionString *string `json:"srvConnectionString" tf:"srv_connection_string,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ReadOnlySpecsObservation struct {
}

type ReadOnlySpecsParameters struct {

	// +kubebuilder:validation:Optional
	DiskIops *float64 `json:"diskIops,omitempty" tf:"disk_iops,omitempty"`

	// +kubebuilder:validation:Optional
	EBSVolumeType *string `json:"ebsVolumeType,omitempty" tf:"ebs_volume_type,omitempty"`

	// +kubebuilder:validation:Required
	InstanceSize *string `json:"instanceSize" tf:"instance_size,omitempty"`

	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`
}

type RegionConfigsObservation struct {
}

type RegionConfigsParameters struct {

	// +kubebuilder:validation:Optional
	AnalyticsSpecs []AnalyticsSpecsParameters `json:"analyticsSpecs,omitempty" tf:"analytics_specs,omitempty"`

	// +kubebuilder:validation:Optional
	AutoScaling []AutoScalingParameters `json:"autoScaling,omitempty" tf:"auto_scaling,omitempty"`

	// +kubebuilder:validation:Optional
	BackingProviderName *string `json:"backingProviderName,omitempty" tf:"backing_provider_name,omitempty"`

	// +kubebuilder:validation:Optional
	ElectableSpecs []ElectableSpecsParameters `json:"electableSpecs,omitempty" tf:"electable_specs,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	ProviderName *string `json:"providerName" tf:"provider_name,omitempty"`

	// +kubebuilder:validation:Optional
	ReadOnlySpecs []ReadOnlySpecsParameters `json:"readOnlySpecs,omitempty" tf:"read_only_specs,omitempty"`

	// +kubebuilder:validation:Required
	RegionName *string `json:"regionName" tf:"region_name,omitempty"`
}

type ReplicationSpecsObservation struct {
	ContainerID map[string]*string `json:"containerId,omitempty" tf:"container_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReplicationSpecsParameters struct {

	// +kubebuilder:validation:Optional
	NumShards *float64 `json:"numShards,omitempty" tf:"num_shards,omitempty"`

	// +kubebuilder:validation:Required
	RegionConfigs []RegionConfigsParameters `json:"regionConfigs" tf:"region_configs,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

// AdvancedClusterSpec defines the desired state of AdvancedCluster
type AdvancedClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AdvancedClusterParameters `json:"forProvider"`
}

// AdvancedClusterStatus defines the observed state of AdvancedCluster.
type AdvancedClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AdvancedClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AdvancedCluster is the Schema for the AdvancedClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type AdvancedCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AdvancedClusterSpec   `json:"spec"`
	Status            AdvancedClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AdvancedClusterList contains a list of AdvancedClusters
type AdvancedClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AdvancedCluster `json:"items"`
}

// Repository type metadata.
var (
	AdvancedCluster_Kind             = "AdvancedCluster"
	AdvancedCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AdvancedCluster_Kind}.String()
	AdvancedCluster_KindAPIVersion   = AdvancedCluster_Kind + "." + CRDGroupVersion.String()
	AdvancedCluster_GroupVersionKind = CRDGroupVersion.WithKind(AdvancedCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&AdvancedCluster{}, &AdvancedClusterList{})
}
