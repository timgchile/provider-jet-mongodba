/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSConfigurationClusterAwsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DNSConfigurationClusterAwsParameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +crossplane:generate:reference:type=github.com/timgchile/provider-jet-mongodba/apis/mongodba/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/timgchile/provider-jet-mongodba/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`
}

// DNSConfigurationClusterAwsSpec defines the desired state of DNSConfigurationClusterAws
type DNSConfigurationClusterAwsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSConfigurationClusterAwsParameters `json:"forProvider"`
}

// DNSConfigurationClusterAwsStatus defines the observed state of DNSConfigurationClusterAws.
type DNSConfigurationClusterAwsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSConfigurationClusterAwsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DNSConfigurationClusterAws is the Schema for the DNSConfigurationClusterAwss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type DNSConfigurationClusterAws struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DNSConfigurationClusterAwsSpec   `json:"spec"`
	Status            DNSConfigurationClusterAwsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSConfigurationClusterAwsList contains a list of DNSConfigurationClusterAwss
type DNSConfigurationClusterAwsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSConfigurationClusterAws `json:"items"`
}

// Repository type metadata.
var (
	DNSConfigurationClusterAws_Kind             = "DNSConfigurationClusterAws"
	DNSConfigurationClusterAws_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSConfigurationClusterAws_Kind}.String()
	DNSConfigurationClusterAws_KindAPIVersion   = DNSConfigurationClusterAws_Kind + "." + CRDGroupVersion.String()
	DNSConfigurationClusterAws_GroupVersionKind = CRDGroupVersion.WithKind(DNSConfigurationClusterAws_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSConfigurationClusterAws{}, &DNSConfigurationClusterAwsList{})
}
