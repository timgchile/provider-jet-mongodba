/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsObservation struct {
}

type ActionsParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	Resources []ResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type DBRoleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DBRoleParameters struct {

	// +kubebuilder:validation:Optional
	Actions []ActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// +kubebuilder:validation:Optional
	InheritedRoles []InheritedRolesParameters `json:"inheritedRoles,omitempty" tf:"inherited_roles,omitempty"`

	// +crossplane:generate:reference:type=github.com/timgchile/provider-jet-mongodba/apis/mongodba/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/timgchile/provider-jet-mongodba/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`
}

type InheritedRolesObservation struct {
}

type InheritedRolesParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Required
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`
}

type ResourcesObservation struct {
}

type ResourcesParameters struct {

	// +kubebuilder:validation:Optional
	Cluster *bool `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

// DBRoleSpec defines the desired state of DBRole
type DBRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DBRoleParameters `json:"forProvider"`
}

// DBRoleStatus defines the observed state of DBRole.
type DBRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DBRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DBRole is the Schema for the DBRoles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type DBRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DBRoleSpec   `json:"spec"`
	Status            DBRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DBRoleList contains a list of DBRoles
type DBRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DBRole `json:"items"`
}

// Repository type metadata.
var (
	DBRole_Kind             = "DBRole"
	DBRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DBRole_Kind}.String()
	DBRole_KindAPIVersion   = DBRole_Kind + "." + CRDGroupVersion.String()
	DBRole_GroupVersionKind = CRDGroupVersion.WithKind(DBRole_Kind)
)

func init() {
	SchemeBuilder.Register(&DBRole{}, &DBRoleList{})
}
