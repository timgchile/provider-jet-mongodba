/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsEventbridgeObservation struct {
}

type AwsEventbridgeParameters struct {

	// +kubebuilder:validation:Optional
	ConfigAccountID *string `json:"configAccountId,omitempty" tf:"config_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region,omitempty"`
}

type EventProcessorsObservation struct {
}

type EventProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	AwsEventbridge []AwsEventbridgeParameters `json:"awsEventbridge,omitempty" tf:"aws_eventbridge,omitempty"`
}

type TriggerObservation struct {
	ConfigScheduleType *string `json:"configScheduleType,omitempty" tf:"config_schedule_type,omitempty"`

	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`
}

type TriggerParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigOperationTypes []*string `json:"configOperationTypes,omitempty" tf:"config_operation_types,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigProject *string `json:"configProject,omitempty" tf:"config_project,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigProviders []*string `json:"configProviders,omitempty" tf:"config_providers,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigServiceID *string `json:"configServiceId,omitempty" tf:"config_service_id,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Optional
	EventProcessors []EventProcessorsParameters `json:"eventProcessors,omitempty" tf:"event_processors,omitempty"`

	// +kubebuilder:validation:Optional
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/timgchile/provider-jet-mongodba/apis/mongodba/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/timgchile/provider-jet-mongodba/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// TriggerSpec defines the desired state of Trigger
type TriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerParameters `json:"forProvider"`
}

// TriggerStatus defines the observed state of Trigger.
type TriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Trigger is the Schema for the Triggers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type Trigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TriggerSpec   `json:"spec"`
	Status            TriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerList contains a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trigger `json:"items"`
}

// Repository type metadata.
var (
	Trigger_Kind             = "Trigger"
	Trigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Trigger_Kind}.String()
	Trigger_KindAPIVersion   = Trigger_Kind + "." + CRDGroupVersion.String()
	Trigger_GroupVersionKind = CRDGroupVersion.WithKind(Trigger_Kind)
)

func init() {
	SchemeBuilder.Register(&Trigger{}, &TriggerList{})
}
