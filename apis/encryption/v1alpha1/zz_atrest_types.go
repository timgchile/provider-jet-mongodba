/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AtRestObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AtRestParameters struct {

	// +kubebuilder:validation:Optional
	AwsKMSConfig []AwsKMSConfigParameters `json:"awsKmsConfig,omitempty" tf:"aws_kms_config,omitempty"`

	// +kubebuilder:validation:Optional
	AwsKMSSecretRef map[string]v1.SecretKeySelector `json:"awsKmsSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	AzureKeyVaultConfig []AzureKeyVaultConfigParameters `json:"azureKeyVaultConfig,omitempty" tf:"azure_key_vault_config,omitempty"`

	// +kubebuilder:validation:Optional
	AzureKeyVaultSecretRef map[string]v1.SecretKeySelector `json:"azureKeyVaultSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	GoogleCloudKMSConfig []GoogleCloudKMSConfigParameters `json:"googleCloudKmsConfig,omitempty" tf:"google_cloud_kms_config,omitempty"`

	// +kubebuilder:validation:Optional
	GoogleCloudKMSSecretRef map[string]v1.SecretKeySelector `json:"googleCloudKmsSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type AwsKMSConfigObservation struct {
}

type AwsKMSConfigParameters struct {

	// +kubebuilder:validation:Optional
	AccessKeyIDSecretRef *v1.SecretKeySelector `json:"accessKeyIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CustomerMasterKeyIDSecretRef *v1.SecretKeySelector `json:"customerMasterKeyIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef *v1.SecretKeySelector `json:"secretAccessKeySecretRef,omitempty" tf:"-"`
}

type AzureKeyVaultConfigObservation struct {
}

type AzureKeyVaultConfigParameters struct {

	// +kubebuilder:validation:Optional
	AzureEnvironment *string `json:"azureEnvironment,omitempty" tf:"azure_environment,omitempty"`

	// +kubebuilder:validation:Optional
	ClientIDSecretRef *v1.SecretKeySelector `json:"clientIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	KeyIdentifierSecretRef *v1.SecretKeySelector `json:"keyIdentifierSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KeyVaultName *string `json:"keyVaultName,omitempty" tf:"key_vault_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubscriptionIDSecretRef *v1.SecretKeySelector `json:"subscriptionIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TenantIDSecretRef *v1.SecretKeySelector `json:"tenantIdSecretRef,omitempty" tf:"-"`
}

type GoogleCloudKMSConfigObservation struct {
}

type GoogleCloudKMSConfigParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVersionResourceIDSecretRef *v1.SecretKeySelector `json:"keyVersionResourceIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceAccountKeySecretRef *v1.SecretKeySelector `json:"serviceAccountKeySecretRef,omitempty" tf:"-"`
}

// AtRestSpec defines the desired state of AtRest
type AtRestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AtRestParameters `json:"forProvider"`
}

// AtRestStatus defines the observed state of AtRest.
type AtRestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AtRestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AtRest is the Schema for the AtRests API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbajet}
type AtRest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AtRestSpec   `json:"spec"`
	Status            AtRestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AtRestList contains a list of AtRests
type AtRestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AtRest `json:"items"`
}

// Repository type metadata.
var (
	AtRest_Kind             = "AtRest"
	AtRest_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AtRest_Kind}.String()
	AtRest_KindAPIVersion   = AtRest_Kind + "." + CRDGroupVersion.String()
	AtRest_GroupVersionKind = CRDGroupVersion.WithKind(AtRest_Kind)
)

func init() {
	SchemeBuilder.Register(&AtRest{}, &AtRestList{})
}
